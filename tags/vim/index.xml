<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vim on MOHDUR</title>
    <link>https://mohdur.github.io/tags/vim/</link>
    <description>Recent content in Vim on MOHDUR</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 24 Oct 2020 14:28:33 +0200</lastBuildDate><atom:link href="https://mohdur.github.io/tags/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim włączenie pluginu dla wybranych typów plików</title>
      <link>https://mohdur.github.io/post/vim-wlaczenie-pluginu-dla-wybranych-typow-plikow/</link>
      <pubDate>Sat, 24 Oct 2020 14:28:33 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-wlaczenie-pluginu-dla-wybranych-typow-plikow/</guid>
      <description>Dla menadżera pluginów Plug składnia wyląda w ten sposób
1Plug &amp;#39;davidhalter/jedi-vim&amp;#39;, { &amp;#39;for&amp;#39;: &amp;#39;python&amp;#39; }Możemy też uruchomiać plugin dla wielu typów plików
1Plug &amp;#39;kovisoft/paredit&amp;#39;, { &amp;#39;for&amp;#39;: [&amp;#39;clojure&amp;#39;, &amp;#39;scheme&amp;#39;] }Menadżer pluginów Plug jest dostępny na stronie https://github.com/junegunn/vim-plug</description>
    </item>
    
    <item>
      <title>Vim kompilacja ze źrodeł</title>
      <link>https://mohdur.github.io/post/vim-kompilacja-ze-zrodel/</link>
      <pubDate>Sat, 24 Oct 2020 14:23:52 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-kompilacja-ze-zrodel/</guid>
      <description>Pobranie aktualnej wersji z repozytorium git
1$ git clone https://github.com/vim/vim Skrypt do kompilacji.
1#!/bin/env bash 2 3git pull 4 5make distclean 6 7./configure --prefix=/usr/local \ 8 --enable-python3interp=&amp;#39;dynamic&amp;#39; \ 9 --with-python3-command=&amp;#39;python3&amp;#39; \ 10 --with-x \ 11 --enable-gui=gtk3 \ 12 --enable-fontset \ 13 --enable-xim \ 14 --enable-gpm \ 15 --enable-acl \ 16 --enable-multibyte \ 17 --with-features=huge \ 18 --enable-cscope \ 19 --enable-luainterp=&amp;#39;dynamic&amp;#39; \ 20 --with-compiledby=&amp;#39;SebMD&amp;#39; | tee kompiluj.log 21 22echo 23read -p &amp;#34;Naciśnij [ENTER]&amp;#34; 24 25make 26sudo make install 27 28which ntfy &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 29if [ &amp;#34;$?</description>
    </item>
    
    <item>
      <title>Vim obiekty tekstowe</title>
      <link>https://mohdur.github.io/post/vim-obiekty-tekstowe/</link>
      <pubDate>Sat, 24 Oct 2020 13:46:08 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-obiekty-tekstowe/</guid>
      <description>Obiekt tekstowy to blok tekstu, obiektem może być wyraz, paragraf czy tekst pomiędzy nawiasami. Więcej na temat obiektów tekstowych w pomocy
 http://vimdoc.sourceforge.net/htmldoc/motion.html#text-objects http://vimdoc.sourceforge.net/htmldoc/motion.html#operator  Obiekty tekstowe działają również w trybie VISUAL
Vim pozwala na tworzenie własnych obiektów tekstowych, dzięki czemu jest sporo pluginów rozszerzających te wbudowane. Pluginem rozszerzającym obiekty tekstowe jest np. plugin Target - https://github.com/wellle/targets.vim
Wbudowane obiekty tekstowe
1w - wyraz 2W - wyraz, który nie jest oddzielony spacją np.</description>
    </item>
    
    <item>
      <title>Vim działania arytmetyczne</title>
      <link>https://mohdur.github.io/post/vim-dzia%C5%82ania-arytmetyczne/</link>
      <pubDate>Sat, 24 Oct 2020 13:41:24 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-dzia%C5%82ania-arytmetyczne/</guid>
      <description>Zwiększanie, zmniejszanie liczby W trybie NORMAL przechodzimy kursorem na liczbę następnie
   skrót opis     Ctrl-a zwiększa o 1   Ctrl-x zmniejsza o 1    Działania matematyczne w trybie komend W trybie COMMAND uruchamiamy sekwencje Ctrl-r + = następnie wprowadzamy działanie np. 2+2
1:Ctrl-r = 2+2 2:4 Wstawienie wyniku działania matematycznego 1:put =(2+2)*2 Wstawienie zakresu liczb w kolumnie 1:put =range(11,15) wynikiem będzie lista liczb od 11 do 15</description>
    </item>
    
    <item>
      <title>Vim wstawienie makietki</title>
      <link>https://mohdur.github.io/post/vim-wstawienie-makietki/</link>
      <pubDate>Thu, 22 Oct 2020 23:50:24 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-wstawienie-makietki/</guid>
      <description>Funkcja do działania wymaga pluginu fzf.vim https://github.com/junegunn/fzf.vim
Instalacja za pomocą menadżera vim-plug https://github.com/junegunn/vim-plug
1Plug &amp;#39;junegunn/fzf&amp;#39;, { &amp;#39;do&amp;#39;: { -&amp;gt; fzf#install() } }2Plug &amp;#39;junegunn/fzf.vim&amp;#39;Katalog z makietkami ustawiamy w zmiennej g:templates_dir
W funkcji s:read_template_into_buffer(template) możemy wprowadzić jedną modyfikację, jako, że makietek używa się do wstawienia typowej zawartości nagłówka pliku, to funkcja wstawia makietkę na początku pliku, za to odpowiedzialna jest linia (4) execute &#39;0r &#39;.g:templates_dir.&#39;/&#39;.a:template, zmieniając w niej 0r na .r, makietka będzie wstawiana w bieżącej linii zamiast na początku pliku.</description>
    </item>
    
    <item>
      <title>Vim lista projektów i FZF</title>
      <link>https://mohdur.github.io/post/vim-lista-projekt%C3%B3w-i-fzf/</link>
      <pubDate>Thu, 22 Oct 2020 23:37:27 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-lista-projekt%C3%B3w-i-fzf/</guid>
      <description>Funkcja do działania wymaga pluginu fzf.vim https://github.com/junegunn/fzf.vim
Instalacja za pomocą menadżera vim-plug https://github.com/junegunn/vim-plug
1Plug &amp;#39;junegunn/fzf&amp;#39;, { &amp;#39;do&amp;#39;: { -&amp;gt; fzf#install() } }2Plug &amp;#39;junegunn/fzf.vim&amp;#39;Dodajemy nową komendę FZFProj, która przeszukuje listę g:proj.
1let g:proj = [&amp;#39;~/git/&amp;#39;,2 \ &amp;#39;~/git/github&amp;#39;,3 \ &amp;#39;~/src&amp;#39;]45command! FZFProj call fzf#run({6 \ &amp;#39;source&amp;#39;: g:proj,7 \ &amp;#39;sink&amp;#39;: &amp;#39;e&amp;#39;,8 \ &amp;#39;options&amp;#39;: &amp;#39;-m -x +s&amp;#39;,9 \ &amp;#39;down&amp;#39;: &amp;#39;20%&amp;#39;})</description>
    </item>
    
    <item>
      <title>Vim praca z powłoką systemową</title>
      <link>https://mohdur.github.io/post/vim-praca-z-pow%C5%82ok%C4%85-systemow%C4%85/</link>
      <pubDate>Wed, 21 Oct 2020 21:22:56 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-praca-z-pow%C5%82ok%C4%85-systemow%C4%85/</guid>
      <description>Edytor Vim potrafi korzystać z powłoki systemowej za pomocą polecenia :r ! czy też !. Polecenie r! pozwala odczytać standardowe wyjście polecenia i wstawić je do bufora. Polecenie ! po prostu wykonuje polecenie systemowe.
Wstawienie wyjścia polecenia systemowego do bufora Polecenie ls -alh, wyświetlające wszystkie pliki w bieżącym katalogu, jednocześnie ustawia cztery kolumny w odpowiedniej kolejności: nazwa, rozmiar, data, godzina.
1:r!ls -alh | awk &amp;#39;{ print &amp;#34; &amp;#34;, $8, &amp;#34; &amp;#34;, $5, &amp;#34; &amp;#34;, $6, &amp;#34; &amp;#34;, $7}&amp;#39; | column -t 2.</description>
    </item>
    
    <item>
      <title>Vim uruchomienie polecenia z bufora</title>
      <link>https://mohdur.github.io/post/vim-uruchomienie-polecenia-z-bufora/</link>
      <pubDate>Wed, 21 Oct 2020 19:11:09 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-uruchomienie-polecenia-z-bufora/</guid>
      <description>Do skopiowania treści z bufora (edytowanego pliku) i wprowadzenie go do linii komend edytora Vim, użyjemy mechanizmu rejestrów, więcej na temat rejestrów można dowiedzieć się z pomocy :help registers. Żeby sprawdzić co mamy w rejestrze możemy użyć polecenia :registers lub :display w skrócie :reg i :dis. Standardowo pod znakiem &amp;quot; jest ostatni wpis. Żeby użyć polecenia z rejestru pod numerem 5 wprowadzamy następującą kombinację klawiszy:
1:Ctrl+r5 Oto przykład użycia polecenia :reg</description>
    </item>
    
    <item>
      <title>Vim wysyłanie bieżącej linii do innego pliku</title>
      <link>https://mohdur.github.io/post/vim-wysy%C5%82anie-bie%C5%BC%C4%85cej-linii-do-innego-pliku/</link>
      <pubDate>Wed, 21 Oct 2020 19:05:40 +0200</pubDate>
      
      <guid>https://mohdur.github.io/post/vim-wysy%C5%82anie-bie%C5%BC%C4%85cej-linii-do-innego-pliku/</guid>
      <description>Przy tej operacji użyjemy funkcji writefile oraz getreg, wysłanie bieżącej linii do innego pliku w tym wypadku oznacza usunięcie linii z bieżącego bufora i wklejenie jej do innego pliku.
W tym wypadku zostanie zmapowana kombinacja klawiszy &amp;lt;leader&amp;gt;sv, która wyśle linię do pliku ~/todo/vim.md.
1nnoremap &amp;lt;leader&amp;gt;sv :d&amp;lt;cr&amp;gt;:cd ~/todo/&amp;lt;cr&amp;gt;:call writefile(getreg(&amp;#39;@&amp;#39;, 1, 1), &amp;#39;vim.md&amp;#39;, &amp;#39;a&amp;#39;)&amp;lt;cr&amp;gt;:cd %:p:h&amp;lt;cr&amp;gt; Możemy wysłać kilka linii do innego pliku używając trybu VISUAL (Shift+v), także w tym przypadku jest zmapowana ta sama kombinacja klawiszy &amp;lt;leader&amp;gt;sv.</description>
    </item>
    
  </channel>
</rss>
